#include <cassert>
#include <cstddef>
#include <utility>

namespace individual_project {
const float coeffs[3][4][16] = {
    {
        {0.719528704, -0.410078504, -0.124879561, -0.402723433, 0.068782148, -0.483889364, 0.266925206, -0.306812433, 0.280654383, -0.290754409, -0.376670463, -0.489259829, -0.427836070, -1.059962583, -1.397904766, -2.987382007},
        {-0.000055687, 0.793565595, 0.097071682, 0.264555215, 0.039482258, 0.320346551, -0.057021478, 0.388577906, 0.020090761, 0.144506241, 0.253012229, 0.110902566, 0.177744803, 0.251791242, 1.488816627, -1.007848565},
        {-0.116252748, 0.171107863, 0.083887978, 0.069942536, 0.023313281, -0.005697757, -0.111563287, -0.283763226, -0.000034096, 0.497419489, 0.071997901, 0.222060912, 0.032659863, 0.286291468, -0.344166483, -0.260917225},
        {-0.002856519, -0.202103626, 0.061353635, 0.030607860, 0.016809407, -0.000870820, 0.000047292, 0.097566759, -0.005661819, -0.205555773, 0.004128397, 0.040346739, 0.033050135, -0.021255506, -0.463616442, 0.189392998},
    },
    {
        {0.689488914, -0.330073439, -0.013777243, -0.152546216, 0.174247160, 0.188915325, -0.109394861, -0.150169978, 0.310923024, -0.163540289, -0.151065265, -0.402107580, -0.681879112, -0.022951732, 0.283722196, -0.526248663},
        {-0.000019690, 0.597175965, 0.066436445, 0.076138361, 0.112973385, -0.019199239, -0.176134355, -0.057825716, 0.020560763, 0.057079020, 0.096738861, -0.107442480, 0.078578880, 0.074084902, 0.000000000, 0.000000000},
        {-0.141347509, 0.045565245, 0.030128275, -0.038428301, 0.032488392, 0.043205123, 0.476475847, -0.034926063, -0.000392373, 0.338201726, 0.072526718, 0.076291571, -0.169514791, 0.174169862, -0.093570303, 0.174003902},
        {-0.004426424, -0.142996135, 0.008785733, 0.049835627, -0.064718070, 0.389754346, -0.368853916, 0.938129795, -0.008101911, -0.132444858, 0.013809845, 0.041989074, -0.201655850, -0.302702513, 0.000000000, 0.000000000},
    },
    {
        {0.689451888, -0.149995107, 0.082330024, -0.069376304, 0.107534539, -0.032672720, 0.030239170, 0.000000000, 0.309574443, -0.057310616, 0.023637187, -0.064970310, -0.072003987, -0.030586918, 1.023116904, 0.000000000},
        {-0.000524518, 0.362661750, 0.016807760, 0.066684384, 0.020228949, -0.060123663, -0.084271807, -0.000000000, -0.063163480, 0.021326334, 0.032325894, -0.041126228, 0.309452712, 0.817625091, 0.000000000, 0.000000000},
        {-0.114540837, 0.007125499, 0.010041054, -0.006998312, -0.091253942, -0.212921598, 0.205430678, 0.000000000, -0.000221320, 0.156649171, 0.015732374, 0.018686106, -0.052085952, -0.308966166, 1.851459865, 0.000000000},
        {0.000365027, -0.132174553, 0.003844957, 0.065329878, -0.019240670, 0.145157058, -0.230454136, 0.000000000, -0.002462339, -0.142056839, 0.002951751, 0.070443355, 0.093203849, -0.463769208, 0.000000000, 0.000000000},
    },
};
static const std::pair<int, int> coords[] = {
    std::make_pair(0, 1), std::make_pair(1, 0), std::make_pair(1, 1)};

template <typename T>
void predict(T* ac, const float* top_ac, const float* left_ac, int c,
             bool inplace) {
  if (top_ac == nullptr && left_ac == nullptr) {
    return;
  }

  for (auto pos : coords) {
    const size_t idx = 8 * pos.second + pos.first;
    size_t offset;
    float prediction = 0;

    if (left_ac != nullptr) {
      offset = 8 * pos.second;
      for (int i = 0; i < 8; i++) {
        assert(offset + i < 64);
        if (offset + i == 0) continue;
        prediction +=
            coeffs[c][2 * pos.second + pos.first][i] * left_ac[offset + i];
      }
    }

    if (top_ac != nullptr) {
      offset = pos.first;
      for (int i = 0; i < 8; i++) {
        if (offset + i == 0) continue;
        assert(offset + 8 * i < 64);
        prediction += coeffs[c][2 * pos.second + pos.first][8 + i] *
                      top_ac[8 * i + offset];
      }
    }

    if (inplace) {
      ac[idx] += static_cast<int>(prediction);
    } else
      ac[idx] = static_cast<int>(prediction);
  }
}

template void predict<float>(float*, const float*, const float*, int, bool);
template void predict<int>(int*, const float*, const float*, int, bool);

void applyPrediction(float* ac, const int* predictions, size_t row_size) {
  for (size_t i = 0; i < row_size; i++) {
    for (auto pos : coords) {
      const size_t idx = 8 * pos.second + pos.first;
      ac[64 * i + idx] -= predictions[64 * i + idx];
    }
  }
}
}  // namespace individual_project
